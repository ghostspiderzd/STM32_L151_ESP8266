<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OUTPUT\obj\STM321-M8266WIFI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OUTPUT\obj\STM321-M8266WIFI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jun 25 11:48:35 2019
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; WIFI_Receive_AND_AnalysisData &rArr; PROTOCOL_ParseCode &rArr; PROTOCOL_ParseDI &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[d7]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d7]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[46]">COMP_ACQ_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[28]">COMP_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[27]">DAC_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel1_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel2_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel3_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[22]">DMA1_Channel6_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[23]">DMA1_Channel7_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[41]">DMA2_Channel1_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[42]">DMA2_Channel2_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[43]">DMA2_Channel3_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[44]">DMA2_Channel4_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[45]">DMA2_Channel5_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from stm32l1xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[2a]">LCD_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from sys.o(i.SysTick_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l152xc.o(.text)
 <LI><a href="#[14]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[2c]">TIM10_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[2d]">TIM11_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[3d]">TIM6_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[2b]">TIM9_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[4a]">Task_MICE</a> from wifidriver.o(i.Task_MICE) referenced from protocol.o(i.PROTOCOL_ParseDI)
 <LI><a href="#[4d]">Task_SendHeart</a> from wifidriver.o(i.Task_SendHeart) referenced from wifidriver.o(i.WIFI_FlowPath)
 <LI><a href="#[49]">Task_SendRealData</a> from wifidriver.o(i.Task_SendRealData) referenced from protocol.o(i.PROTOCOL_ParseDI)
 <LI><a href="#[49]">Task_SendRealData</a> from wifidriver.o(i.Task_SendRealData) referenced from wifidriver.o(i.WIFI_FlowPath)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from stm32l1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[3c]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[25]">USB_HP_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[26]">USB_LP_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[4e]">WIFI_ATCmdInit</a> from wifidriver.o(i.WIFI_ATCmdInit) referenced from wifidriver.o(i.WIFI_ResetFlow)
 <LI><a href="#[4e]">WIFI_ATCmdInit</a> from wifidriver.o(i.WIFI_ATCmdInit) referenced from main.o(i.main)
 <LI><a href="#[4b]">WIFI_ConfigFinishDelay</a> from wifidriver.o(i.WIFI_ConfigFinishDelay) referenced from wifidriver.o(i.WIFI_ATCmdInit)
 <LI><a href="#[4c]">WIFI_FlowPath</a> from wifidriver.o(i.WIFI_FlowPath) referenced from wifidriver.o(i.WIFI_ConfigFinishDelay)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32l152xc.o(.text) referenced from startup_stm32l152xc.o(RESET)
 <LI><a href="#[4f]">__main</a> from __main.o(!!!main) referenced from startup_stm32l152xc.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[52]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[53]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[54]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[11e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[120]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[121]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[122]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[123]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[124]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[125]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[126]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[127]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[130]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[131]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[139]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[56]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[58]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; WIFI_Receive_AND_AnalysisData &rArr; PROTOCOL_ParseCode &rArr; PROTOCOL_ParseDI &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[24]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l152xc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHexChar
</UL>

<P><STRONG><a name="[64]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHexChar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendHeart
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendRealData
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MICE
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Struct_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_AND_AnalysisData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_StructInit
</UL>

<P><STRONG><a name="[65]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[13e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d3]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
</UL>

<P><STRONG><a name="[141]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[142]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[68]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[55]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[6a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[145]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[69]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[146]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6b]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[60]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[70]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[71]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifidriver.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>HAL_GPIO_Init</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[f5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_DeleteInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Sub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Add
</UL>

<P><STRONG><a name="[7c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[fb]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[74]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[77]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[79]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[75]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[107]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[7d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1840 bytes, Stack size 40 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[80]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[83]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[82]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32l1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[85]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, speed.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>IntToHexChar</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, protocol.o(i.IntToHexChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToHexChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHexChar
</UL>

<P><STRONG><a name="[92]"></a>M8266HostIf_GPIO_CS_RESET_Init</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_GPIO_CS_RESET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = M8266HostIf_GPIO_CS_RESET_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
</UL>

<P><STRONG><a name="[93]"></a>M8266HostIf_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = M8266HostIf_Init &rArr; M8266HostIf_GPIO_CS_RESET_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>M8266HostIf_SPI_DMA_StartReceiveSendData</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_DMA_StartReceiveSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
</UL>

<P><STRONG><a name="[94]"></a>M8266HostIf_SPI_Init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = M8266HostIf_SPI_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
</UL>

<P><STRONG><a name="[95]"></a>M8266HostIf_SPI_Select</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = M8266HostIf_SPI_Select &rArr; M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[a0]"></a>M8266HostIf_SPI_SetSpeed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_SPI_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266HostIf_SPI_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[c7]"></a>M8266HostIf_SPI_rrs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_rrs))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>

<P><STRONG><a name="[c8]"></a>M8266HostIf_SPI_wrs</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, m8266wifidrv.o(i.M8266HostIf_SPI_wrs))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>

<P><STRONG><a name="[9c]"></a>M8266HostIf_Set_SPI_nCS_Pin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Set_SPI_nCS_Pin))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>

<P><STRONG><a name="[9e]"></a>M8266HostIf_Set_nRESET_Pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Set_nRESET_Pin))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[97]"></a>M8266HostIf_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsbsbs1
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[9b]"></a>M8266WIFI_Module_Hardware_Reset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_Module_Hardware_Reset &rArr; M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_nRESET_Pin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[9f]"></a>M8266WIFI_Module_Init_Via_SPI</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_Init_Via_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M8266WIFI_Module_Init_Via_SPI &rArr; M8266HostIf_SPI_Select &rArr; M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>M8266WIFI_Module_delay_ms</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[a4]"></a>M8266WIFI_SPI_Config_STA_Param</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Config_STA_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M8266WIFI_SPI_Config_STA_Param &rArr; M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[a6]"></a>M8266WIFI_SPI_Delete_Connection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Delete_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = M8266WIFI_SPI_Delete_Connection &rArr; M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[98]"></a>M8266WIFI_SPI_Get_Module_Info</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_Module_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_Get_Module_Info &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[a3]"></a>M8266WIFI_SPI_Get_Opmode</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M8266WIFI_SPI_Get_Opmode &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[ad]"></a>M8266WIFI_SPI_Get_STA_Connection_Status</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_STA_Connection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
</UL>

<P><STRONG><a name="[ae]"></a>M8266WIFI_SPI_Get_STA_IP_Addr</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Get_STA_IP_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M8266WIFI_SPI_Get_STA_IP_Addr &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
</UL>

<P><STRONG><a name="[af]"></a>M8266WIFI_SPI_Has_DataReceived</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Has_DataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_Has_DataReceived &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
</UL>

<P><STRONG><a name="[a1]"></a>M8266WIFI_SPI_Interface_Communication_OK</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Interface_Communication_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266WIFI_SPI_Interface_Communication_OK &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[a2]"></a>M8266WIFI_SPI_Interface_Communication_Stress_Test</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Interface_Communication_Stress_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_Interface_Communication_Stress_Test &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[b2]"></a>M8266WIFI_SPI_Query_Connection</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Query_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>

<P><STRONG><a name="[b3]"></a>M8266WIFI_SPI_Recv</STRONG> (Thumb, 522 bytes, Stack size 88 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sbis
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
</UL>

<P><STRONG><a name="[bb]"></a>M8266WIFI_SPI_RecvData</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_data
</UL>

<P><STRONG><a name="[bc]"></a>M8266WIFI_SPI_STA_Connect_Ap</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_STA_Connect_Ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = M8266WIFI_SPI_STA_Connect_Ap &rArr; M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_STA_Param
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
</UL>

<P><STRONG><a name="[bd]"></a>M8266WIFI_SPI_STA_Connect_Ap_Old</STRONG> (Thumb, 386 bytes, Stack size 72 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_STA_Connect_Ap_Old))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[be]"></a>M8266WIFI_SPI_Send_Data</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
</UL>

<P><STRONG><a name="[c0]"></a>M8266WIFI_SPI_Set_Opmode</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Set_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M8266WIFI_SPI_Set_Opmode &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
</UL>

<P><STRONG><a name="[c1]"></a>M8266WIFI_SPI_Setup_Connection</STRONG> (Thumb, 512 bytes, Stack size 104 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Setup_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = M8266WIFI_SPI_Setup_Connection &rArr; M8266WIFI_SPI_Delete_Connection &rArr; M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
</UL>

<P><STRONG><a name="[c4]"></a>M8266WIFI_SPI_Slave_Has_Response</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Slave_Has_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_Slave_Has_Response &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
</UL>

<P><STRONG><a name="[ba]"></a>M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[c5]"></a>M8266WIFI_SPI_TxdBuffer_Free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_TxdBuffer_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_TxdBuffer_Free &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
</UL>

<P><STRONG><a name="[a5]"></a>M8266WIFI_SPI_capstp</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_capstp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_STA_Param
</UL>

<P><STRONG><a name="[aa]"></a>M8266WIFI_SPI_csb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_csb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_csb &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
</UL>

<P><STRONG><a name="[a7]"></a>M8266WIFI_SPI_dlodc</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_dlodc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
</UL>

<P><STRONG><a name="[c6]"></a>M8266WIFI_SPI_qacal</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_qacal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>

<P><STRONG><a name="[b1]"></a>M8266WIFI_SPI_rra</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_rra))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266WIFI_SPI_rra
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>

<P><STRONG><a name="[b8]"></a>M8266WIFI_SPI_rru</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_rru))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_rru
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b7]"></a>M8266WIFI_SPI_rrud</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_rrud))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M8266WIFI_SPI_rrud &rArr; M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b9]"></a>M8266WIFI_SPI_sbis</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_sbis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_sbis &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[bf]"></a>M8266WIFI_SPI_sdfal</STRONG> (Thumb, 558 bytes, Stack size 104 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_sdfal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsbsbs1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
</UL>

<P><STRONG><a name="[ac]"></a>M8266WIFI_SPI_srh</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_srh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
</UL>

<P><STRONG><a name="[b0]"></a>M8266WIFI_SPI_ssa</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsbsbs1
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tufs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sbis
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_TxdBuffer_Free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Slave_Has_Response
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[ab]"></a>M8266WIFI_SPI_ssb</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M8266WIFI_SPI_ssb &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
</UL>

<P><STRONG><a name="[96]"></a>M8266WIFI_SPI_ssmd</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[cf]"></a>M8266WIFI_SPI_ssu</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_ssu
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[cb]"></a>M8266WIFI_SPI_ssud</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssud))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M8266WIFI_SPI_ssud &rArr; M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_DMA_StartReceiveSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[cc]"></a>M8266WIFI_SPI_ssut</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_ssut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_ssut
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[d1]"></a>M8266WIFI_SPI_tufs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_tufs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M8266WIFI_SPI_tufs &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
</UL>

<P><STRONG><a name="[d2]"></a>M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m8266wifi_ops.o(i.M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip &rArr; M8266WIFI_SPI_Get_STA_IP_Addr &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
</UL>

<P><STRONG><a name="[ce]"></a>M8266WIFI_SPI_wsbsbs1</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wsbsbs1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wsbsbs1 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[a9]"></a>M8266WIFI_SPI_wscbf</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wscbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wscbf &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_TxdBuffer_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
</UL>

<P><STRONG><a name="[d0]"></a>M8266WIFI_SPI_wscr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wscr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Slave_Has_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[b5]"></a>M8266WIFI_SPI_wspsr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wspsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wspsr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[ca]"></a>M8266WIFI_SPI_wspss</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wspss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_SPI_wspss &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[b6]"></a>M8266WIFI_SPI_wsscbhud</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wsscbhud))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266WIFI_SPI_wsscbhud &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b4]"></a>M8266WIFI_SPI_wsscrhd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m8266wifidrv.o(i.M8266WIFI_SPI_wsscrhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M8266WIFI_SPI_wsscrhd &rArr; M8266WIFI_SPI_Has_DataReceived &rArr; M8266WIFI_SPI_ssa
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[cd]"></a>M8266WIFI_Wait_SPI_sfad</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, m8266wifidrv.o(i.M8266WIFI_Wait_SPI_sfad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tufs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[d4]"></a>MX_GPIO_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, wifidriver.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>MX_TIM2_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, speed.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>PROTOCOL_CreateHeartPack</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, protocol.o(i.PROTOCOL_CreateHeartPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PROTOCOL_CreateHeartPack
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendHeart
</UL>

<P><STRONG><a name="[ed]"></a>PROTOCOL_CreatePrescriptionFinshPack</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, protocol.o(i.PROTOCOL_CreatePrescriptionFinshPack))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
</UL>

<P><STRONG><a name="[da]"></a>PROTOCOL_CreateRealDataPack</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, protocol.o(i.PROTOCOL_CreateRealDataPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PROTOCOL_CreateRealDataPack &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendRealData
</UL>

<P><STRONG><a name="[102]"></a>PROTOCOL_CreateRegistPack</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, protocol.o(i.PROTOCOL_CreateRegistPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PROTOCOL_CreateRegistPack
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
</UL>

<P><STRONG><a name="[e9]"></a>PROTOCOL_PackedData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, protocol.o(i.PROTOCOL_PackedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PROTOCOL_PackedData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendHeart
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendRealData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
</UL>

<P><STRONG><a name="[e4]"></a>PROTOCOL_ParseCode</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, protocol.o(i.PROTOCOL_ParseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PROTOCOL_ParseCode &rArr; PROTOCOL_ParseDI &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_AND_AnalysisData
</UL>

<P><STRONG><a name="[e5]"></a>PROTOCOL_ParseDI</STRONG> (Thumb, 734 bytes, Stack size 72 bytes, protocol.o(i.PROTOCOL_ParseDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = PROTOCOL_ParseDI &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Recover_ResValue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_PackedData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreatePrescriptionFinshPack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseCode
</UL>

<P><STRONG><a name="[ef]"></a>PROTOCOL_StructInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(i.PROTOCOL_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PROTOCOL_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>PrintfHexChar</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uartdriver.o(i.PrintfHexChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PrintfHexChar &rArr; UART2_SendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexChar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_AND_AnalysisData
</UL>

<P><STRONG><a name="[c3]"></a>SPI_STA_Get_HostIP_by_HostName</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, m8266wifidrv.o(i.SPI_STA_Get_HostIP_by_HostName))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>Speed_calculate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, speed.o(i.Speed_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Speed_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendRealData
</UL>

<P><STRONG><a name="[f4]"></a>Switch_Add</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, switch.o(i.Switch_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Switch_Add &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MICE
</UL>

<P><STRONG><a name="[f7]"></a>Switch_DeleteInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, switch.o(i.Switch_DeleteInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Switch_DeleteInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Init
</UL>

<P><STRONG><a name="[f8]"></a>Switch_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, switch.o(i.Switch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Switch_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_DeleteInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>Switch_Mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, switch.o(i.Switch_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Switch_Mode &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Init
</UL>

<P><STRONG><a name="[fa]"></a>Switch_Sub</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, switch.o(i.Switch_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Switch_Sub &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Recover_ResValue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MICE
</UL>

<P><STRONG><a name="[f3]"></a>SysTick_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.SysTick_Get))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_calculate
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, sys.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>Task_MICE</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, wifidriver.o(i.Task_MICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Task_MICE &rArr; UART2_SendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Sub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Add
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Stop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.PROTOCOL_ParseDI)
</UL>
<P><STRONG><a name="[4d]"></a>Task_SendHeart</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wifidriver.o(i.Task_SendHeart))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Task_SendHeart &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_PackedData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateHeartPack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifidriver.o(i.WIFI_FlowPath)
</UL>
<P><STRONG><a name="[49]"></a>Task_SendRealData</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wifidriver.o(i.Task_SendRealData))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Task_SendRealData &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_calculate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_PackedData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> protocol.o(i.PROTOCOL_ParseDI)
<LI> wifidriver.o(i.WIFI_FlowPath)
</UL>
<P><STRONG><a name="[fe]"></a>UART2_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, uartdriver.o(i.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART2_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>UART2_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uartdriver.o(i.UART2_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART2_SendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendHeart
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendRealData
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MICE
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHexChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler &rArr; Uart2_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>Uart2_Handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uartdriver.o(i.Uart2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>WIFI_ATCmdInit</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, wifidriver.o(i.WIFI_ATCmdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = WIFI_ATCmdInit &rArr; M8266WIFI_SPI_Setup_Connection &rArr; M8266WIFI_SPI_Delete_Connection &rArr; M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> wifidriver.o(i.WIFI_ResetFlow)
</UL>
<P><STRONG><a name="[4b]"></a>WIFI_ConfigFinishDelay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wifidriver.o(i.WIFI_ConfigFinishDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WIFI_ConfigFinishDelay &rArr; softTimer_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifidriver.o(i.WIFI_ATCmdInit)
</UL>
<P><STRONG><a name="[4c]"></a>WIFI_FlowPath</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wifidriver.o(i.WIFI_FlowPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WIFI_FlowPath &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_PackedData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRegistPack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifidriver.o(i.WIFI_ConfigFinishDelay)
</UL>
<P><STRONG><a name="[103]"></a>WIFI_Receive_AND_AnalysisData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wifidriver.o(i.WIFI_Receive_AND_AnalysisData))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = WIFI_Receive_AND_AnalysisData &rArr; PROTOCOL_ParseCode &rArr; PROTOCOL_ParseDI &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseCode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHexChar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>WIFI_Receive_data</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wifidriver.o(i.WIFI_Receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WIFI_Receive_data &rArr; M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_AND_AnalysisData
</UL>

<P><STRONG><a name="[ee]"></a>WIFI_Recover_ResValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wifidriver.o(i.WIFI_Recover_ResValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WIFI_Recover_ResValue &rArr; Switch_Sub &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Sub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
</UL>

<P><STRONG><a name="[e7]"></a>WIFI_ResetFlow</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wifidriver.o(i.WIFI_ResetFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WIFI_ResetFlow &rArr; UART2_SendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Create
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendHeart
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Send_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
</UL>

<P><STRONG><a name="[ea]"></a>WIFI_Send_Data</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, wifidriver.o(i.WIFI_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexChar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_Data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendHeart
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SendRealData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
</UL>

<P><STRONG><a name="[105]"></a>WIFI_Struct_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifidriver.o(i.WIFI_Struct_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartdriver.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[106]"></a>delay_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, delay.o(i.delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Sub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Add
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Recover_ResValue
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
</UL>

<P><STRONG><a name="[9a]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[99]"></a>fvcp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, m8266wifidrv.o(i.fvcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fvcp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[c2]"></a>fvdnstap</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m8266wifidrv.o(i.fvdnstap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fvdnstap &rArr; fvcp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = main &rArr; WIFI_Receive_AND_AnalysisData &rArr; PROTOCOL_ParseCode &rArr; PROTOCOL_ParseDI &rArr; WIFI_Send_Data &rArr; M8266WIFI_SPI_Send_Data &rArr; M8266WIFI_SPI_sdfal &rArr; SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Update
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softTimer_Create
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Struct_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Receive_AND_AnalysisData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_StructInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[eb]"></a>softTimer_Create</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, time.o(i.softTimer_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = softTimer_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConfigFinishDelay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>softTimer_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, time.o(i.softTimer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>softTimer_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(i.softTimer_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_FlowPath
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ResetFlow
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MICE
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_ParseDI
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ATCmdInit
</UL>

<P><STRONG><a name="[109]"></a>softTimer_Update</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, time.o(i.softTimer_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softTimer_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[10a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[10d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[110]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[112]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[149]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[113]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[10f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[114]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[116]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[118]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[14b]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[117]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[10b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[111]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[de]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTOCOL_CreateRealDataPack
</UL>

<P><STRONG><a name="[119]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xc.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[7f]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[8f]"></a>UART_SetConfig</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[91]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32l1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[86]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32l1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[89]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[8c]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[8a]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[8b]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[115]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[10e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
